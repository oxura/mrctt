import React, { useState, useEffect } from 'react';
import AppLayout from '../../layouts/AppLayout';
import Calendar from '../../components/tasks/Calendar';
import TaskModal from '../../components/tasks/TaskModal';
import TaskFilters, { TaskFiltersState } from '../../components/tasks/TaskFilters';
import OverdueTasksWidget from '../../components/tasks/OverdueTasksWidget';
import { useAllTasks } from '../../hooks/useAllTasks';
import { useAuthStore } from '../../store/authStore';
import { Task } from '../../hooks/useTasks';
import styles from './Tasks.module.css';

type ViewType = 'month' | 'week' | 'day';

const Tasks: React.FC = () => {
  const { tenant } = useAuthStore();
  const [currentDate, setCurrentDate] = useState(new Date());
  const [viewType, setViewType] = useState<ViewType>('month');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedTask, setSelectedTask] = useState<Task | null>(null);
  const [calendarTasks, setCalendarTasks] = useState<Task[]>([]);
  const [overdueTasks, setOverdueTasks] = useState<Task[]>([]);
  const [filters, setFilters] = useState<TaskFiltersState>({ status: undefined });

  const { fetchCalendarTasks, fetchOverdueTasks, createTask, updateTask, deleteTask, toggleTaskComplete } =
    useAllTasks(filters);

  const isModuleEnabled = tenant?.settings?.modules?.tasks !== false;

  const loadCalendarData = React.useCallback(async () => {
    if (!isModuleEnabled) return;

    const defaultStart = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    const defaultEnd = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);

    const dateFrom = filters.dateFrom
      ? new Date(filters.dateFrom)
      : new Date(defaultStart.setDate(defaultStart.getDate() - 7));

    const dateTo = filters.dateTo
      ? new Date(filters.dateTo)
      : new Date(defaultEnd.setDate(defaultEnd.getDate() + 7));

    if (!filters.dateFrom) {
      dateFrom.setHours(0, 0, 0, 0);
    }

    if (!filters.dateTo) {
      dateTo.setHours(23, 59, 59, 999);
    }

    try {
      const [calendar, overdue] = await Promise.all([
        fetchCalendarTasks(dateFrom.toISOString(), dateTo.toISOString()),
        fetchOverdueTasks(filters.assignedTo),
      ]);

      setCalendarTasks(calendar);
      setOverdueTasks(overdue);
    } catch (error) {
      console.error('Failed to load calendar data', error);
    }
  }, [
    currentDate,
    fetchCalendarTasks,
    fetchOverdueTasks,
    filters.assignedTo,
    filters.dateFrom,
    filters.dateTo,
    isModuleEnabled,
  ]);

  useEffect(() => {
    loadCalendarData();
  }, [loadCalendarData]);

  if (!isModuleEnabled) {
    return (
      <AppLayout breadcrumbs={['–ó–∞–¥–∞—á–∏']}>
        <div className={styles.disabledModule}>
          <div className={styles.disabledMessage}>
            <span className={styles.icon}>üîí</span>
            <h2>–ú–æ–¥—É–ª—å –∑–∞–¥–∞—á –æ—Ç–∫–ª—é—á–µ–Ω</h2>
            <p>–í–∫–ª—é—á–∏—Ç–µ –º–æ–¥—É–ª—å –∑–∞–¥–∞—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.</p>
          </div>
        </div>
      </AppLayout>
    );
  }

  const handlePrevMonth = () => {
    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1));
  };

  const handleNextMonth = () => {
    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1));
  };

  const handleToday = () => {
    setCurrentDate(new Date());
  };

  const handleCreateTask = () => {
    setSelectedTask(null);
    setIsModalOpen(true);
  };

  const handleTaskClick = (task: Task) => {
    setSelectedTask(task);
    setIsModalOpen(true);
  };

  const handleModalSave = async (data: any) => {
    try {
      if (selectedTask) {
        await updateTask(selectedTask.id, data);
      } else {
        await createTask(data);
      }

      await loadCalendarData();
    } catch (error) {
      console.error('Error saving task:', error);
      throw error;
    }
  };

  const handleDeleteTask = async (taskId: string) => {
    try {
      await deleteTask(taskId);
      await loadCalendarData();
    } catch (error) {
      console.error('Error deleting task:', error);
      throw error;
    }
  };

  const handleToggleComplete = async (taskId: string, isCompleted: boolean) => {
    try {
      await toggleTaskComplete(taskId, isCompleted);
      await loadCalendarData();
    } catch (error) {
      console.error('Error toggling task complete:', error);
      throw error;
    }
  };

  const monthNames = [
    '–Ø–Ω–≤–∞—Ä—å',
    '–§–µ–≤—Ä–∞–ª—å',
    '–ú–∞—Ä—Ç',
    '–ê–ø—Ä–µ–ª—å',
    '–ú–∞–π',
    '–ò—é–Ω—å',
    '–ò—é–ª—å',
    '–ê–≤–≥—É—Å—Ç',
    '–°–µ–Ω—Ç—è–±—Ä—å',
    '–û–∫—Ç—è–±—Ä—å',
    '–ù–æ—è–±—Ä—å',
    '–î–µ–∫–∞–±—Ä—å',
  ];

  return (
    <AppLayout breadcrumbs={['–ó–∞–¥–∞—á–∏']}>
      <div className={styles.tasks}>
        <div className={styles.header}>
          <h1>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–¥–∞—á</h1>
          <button className={styles.createButton} onClick={handleCreateTask}>
            + –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
          </button>
        </div>

        <TaskFilters filters={filters} onFiltersChange={setFilters} />

        {overdueTasks.length > 0 && (
          <OverdueTasksWidget tasks={overdueTasks} onTaskClick={handleTaskClick} />
        )}

        <div className={styles.calendarWrapper}>
          <div className={styles.calendarControls}>
            <div className={styles.monthNavigation}>
              <button onClick={handlePrevMonth} className={styles.navButton}>
                ‚Üê
              </button>
              <h2 className={styles.currentMonth}>
                {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}
              </h2>
              <button onClick={handleNextMonth} className={styles.navButton}>
                ‚Üí
              </button>
              <button onClick={handleToday} className={styles.todayButton}>
                –°–µ–≥–æ–¥–Ω—è
              </button>
            </div>

            <div className={styles.viewSwitcher}>
              <button
                className={`${styles.viewButton} ${viewType === 'month' ? styles.active : ''}`}
                onClick={() => setViewType('month')}
              >
                –ú–µ—Å—è—Ü
              </button>
              <button
                className={`${styles.viewButton} ${viewType === 'week' ? styles.active : ''}`}
                onClick={() => setViewType('week')}
                disabled
                title="–°–∫–æ—Ä–æ –¥–æ—Å—Ç—É–ø–Ω–æ"
              >
                –ù–µ–¥–µ–ª—è
              </button>
              <button
                className={`${styles.viewButton} ${viewType === 'day' ? styles.active : ''}`}
                onClick={() => setViewType('day')}
                disabled
                title="–°–∫–æ—Ä–æ –¥–æ—Å—Ç—É–ø–Ω–æ"
              >
                –î–µ–Ω—å
              </button>
            </div>
          </div>

          <Calendar
            tasks={calendarTasks}
            currentDate={currentDate}
            viewType={viewType}
            onDateClick={() => {}}
            onTaskClick={handleTaskClick}
          />
        </div>

        <TaskModal
          isOpen={isModalOpen}
          onClose={() => {
            setIsModalOpen(false);
            setSelectedTask(null);
          }}
          onSave={handleModalSave}
          onDelete={handleDeleteTask}
          onToggleComplete={handleToggleComplete}
          task={selectedTask}
        />
      </div>
    </AppLayout>
  );
};

export default Tasks;
