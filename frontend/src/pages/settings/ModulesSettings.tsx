import React, { useState, useEffect } from 'react';
import { Button, useToast } from '../../components/ui';
import Toggle from '../../components/ui/Toggle';
import { useAuthStore } from '../../store/authStore';
import api from '../../utils/api';
import styles from './ModulesSettings.module.css';

interface Module {
  key: string;
  label: string;
  description: string;
  icon: string;
}

const modules: Module[] = [
  {
    key: 'products',
    label: '–ü—Ä–æ–¥—É–∫—Ç—ã',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —É—Å–ª—É–≥',
    icon: 'üõí',
  },
  {
    key: 'groups',
    label: '–ì—Ä—É–ø–ø—ã / –ü–æ—Ç–æ–∫–∏',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ç—É—Ä–∞–º–∏',
    icon: 'üë•',
  },
  {
    key: 'tasks',
    label: '–ó–∞–¥–∞—á–∏ / –ö–∞–ª–µ–Ω–¥–∞—Ä—å',
    description: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π',
    icon: 'üóìÔ∏è',
  },
  {
    key: 'team',
    label: '–ö–æ–º–∞–Ω–¥–∞',
    description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–æ–ª—è–º–∏',
    icon: 'üë®‚Äçüíº',
  },
];

const ModulesSettings: React.FC = () => {
  const { tenant, updateTenant } = useAuthStore();
  const { showToast } = useToast();

  const [activeModules, setActiveModules] = useState<Record<string, boolean>>({
    products: true,
    groups: false,
    tasks: true,
    team: true,
  });
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (tenant?.settings?.modules) {
      setActiveModules({
        products: tenant.settings.modules.products ?? true,
        groups: tenant.settings.modules.groups ?? false,
        tasks: tenant.settings.modules.tasks ?? true,
        team: tenant.settings.modules.team ?? true,
      });
    }
  }, [tenant]);

  const handleToggle = (key: string, value: boolean) => {
    setActiveModules((prev) => ({ ...prev, [key]: value }));
  };

  const handleSave = async () => {
    setLoading(true);

    try {
      const response = await api.put('/api/v1/tenants/current/settings', {
        modules: activeModules,
      });

      if (response.data?.data?.tenant) {
        updateTenant(response.data.data.tenant);
        showToast('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
      }
    } catch (error) {
      console.error('Failed to save modules settings:', error);
      showToast('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'error');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.container}>
      <h2 className={styles.title}>–ú–æ–¥—É–ª–∏ —Å–∏—Å—Ç–µ–º—ã</h2>
      <p className={styles.description}>
        –í–∫–ª—é—á–∏—Ç–µ –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç–µ —Ä–∞–∑–¥–µ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ. –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –º–µ–Ω—é.
      </p>

      <div className={styles.modulesList}>
        {modules.map((module) => (
          <div key={module.key} className={styles.moduleItem}>
            <div className={styles.moduleInfo}>
              <div className={styles.moduleIcon}>{module.icon}</div>
              <div className={styles.moduleDetails}>
                <div className={styles.moduleLabel}>{module.label}</div>
                <div className={styles.moduleDescription}>{module.description}</div>
              </div>
            </div>
            <Toggle
              checked={activeModules[module.key] || false}
              onChange={(checked) => handleToggle(module.key, checked)}
            />
          </div>
        ))}
      </div>

      <div className={styles.actions}>
        <Button onClick={handleSave} disabled={loading}>
          {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
        </Button>
      </div>
    </div>
  );
};

export default ModulesSettings;
