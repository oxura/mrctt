import React, { useState, useEffect } from 'react';
import { Button, Input, useToast } from '../../components/ui';
import { useAuthStore } from '../../store/authStore';
import type { TenantLeadStatus } from '../../types';
import api from '../../utils/api';
import styles from './LeadStatusesSettings.module.css';

const defaultStatuses: TenantLeadStatus[] = [
  { key: 'new', label: '–ù–æ–≤—ã–π', color: '#38bdf8', order: 0 },
  { key: 'contacted', label: '–°–≤—è–∑–∞–ª–∏—Å—å', color: '#8b5cf6', order: 1 },
  { key: 'qualified', label: '–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω', color: '#6366f1', order: 2 },
  { key: 'proposal_sent', label: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ö–ü', color: '#f97316', order: 3 },
  { key: 'negotiation', label: '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã', color: '#eab308', order: 4 },
  { key: 'won', label: '–£—Å–ø–µ—Ö', color: '#22c55e', order: 5 },
  { key: 'lost', label: '–û—Ç–∫–∞–∑', color: '#ef4444', order: 6 },
  { key: 'on_hold', label: '–û—Ç–ª–æ–∂–µ–Ω–æ', color: '#64748b', order: 7 },
];

const LeadStatusesSettings: React.FC = () => {
  const { tenant, updateTenant } = useAuthStore();
  const { showToast } = useToast();

  const [statuses, setStatuses] = useState<TenantLeadStatus[]>(defaultStatuses);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (tenant?.settings?.lead_statuses && Array.isArray(tenant.settings.lead_statuses)) {
      setStatuses(tenant.settings.lead_statuses);
    }
  }, [tenant]);

  const handleAddStatus = () => {
    const newOrder = Math.max(...statuses.map((s) => s.order), -1) + 1;
    const newStatus: TenantLeadStatus = {
      key: `status_${Date.now()}`,
      label: '–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å',
      color: '#6366f1',
      order: newOrder,
    };
    setStatuses([...statuses, newStatus]);
  };

  const handleUpdateStatus = (index: number, field: keyof TenantLeadStatus, value: string | number) => {
    const updated = [...statuses];
    updated[index] = { ...updated[index], [field]: value };
    setStatuses(updated);
  };

  const handleDeleteStatus = (index: number) => {
    if (statuses.length <= 1) {
      showToast('–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–∞—Ç—É—Å', 'error');
      return;
    }
    const updated = statuses.filter((_, i) => i !== index);
    setStatuses(updated);
  };

  const handleMoveUp = (index: number) => {
    if (index === 0) return;
    const updated = [...statuses];
    [updated[index - 1], updated[index]] = [updated[index], updated[index - 1]];
    updated.forEach((status, idx) => {
      status.order = idx;
    });
    setStatuses(updated);
  };

  const handleMoveDown = (index: number) => {
    if (index === statuses.length - 1) return;
    const updated = [...statuses];
    [updated[index], updated[index + 1]] = [updated[index + 1], updated[index]];
    updated.forEach((status, idx) => {
      status.order = idx;
    });
    setStatuses(updated);
  };

  const handleSave = async () => {
    const uniqueKeys = new Set();
    for (const status of statuses) {
      if (!status.label.trim()) {
        showToast('–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error');
        return;
      }
      if (uniqueKeys.has(status.key)) {
        showToast('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–ª—é—á–∏ —Å—Ç–∞—Ç—É—Å–æ–≤', 'error');
        return;
      }
      uniqueKeys.add(status.key);
    }

    setLoading(true);

    try {
      const response = await api.put('/api/v1/tenants/current/settings', {
        lead_statuses: statuses,
      });

      if (response.data?.data?.tenant) {
        updateTenant(response.data.data.tenant);
        showToast('–°—Ç–∞—Ç—É—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
      }
    } catch (error) {
      console.error('Failed to save lead statuses:', error);
      showToast('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã', 'error');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <div>
          <h2 className={styles.title}>–°—Ç–∞—Ç—É—Å—ã –ª–∏–¥–æ–≤</h2>
          <p className={styles.description}>
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂ –ø–æ–¥ –≤–∞—à –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å
          </p>
        </div>
        <Button onClick={handleAddStatus} variant="outline">
          + –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        </Button>
      </div>

      <div className={styles.statusesList}>
        {statuses.map((status, index) => (
          <div key={status.key} className={styles.statusItem}>
            <div className={styles.statusOrder}>
              <button
                type="button"
                onClick={() => handleMoveUp(index)}
                disabled={index === 0}
                className={styles.orderButton}
                title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö"
              >
                ‚Üë
              </button>
              <span className={styles.orderNumber}>{index + 1}</span>
              <button
                type="button"
                onClick={() => handleMoveDown(index)}
                disabled={index === statuses.length - 1}
                className={styles.orderButton}
                title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑"
              >
                ‚Üì
              </button>
            </div>

            <div className={styles.statusFields}>
              <div className={styles.statusField}>
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                <Input
                  value={status.label}
                  onChange={(e) => handleUpdateStatus(index, 'label', e.target.value)}
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"
                />
              </div>

              <div className={styles.statusField}>
                <label>–¶–≤–µ—Ç</label>
                <div className={styles.colorInput}>
                  <input
                    type="color"
                    value={status.color}
                    onChange={(e) => handleUpdateStatus(index, 'color', e.target.value)}
                    className={styles.colorPicker}
                  />
                  <Input
                    value={status.color}
                    onChange={(e) => handleUpdateStatus(index, 'color', e.target.value)}
                    placeholder="#6366f1"
                    maxLength={7}
                  />
                </div>
              </div>
            </div>

            <button
              type="button"
              onClick={() => handleDeleteStatus(index)}
              className={styles.deleteButton}
              title="–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
            >
              üóëÔ∏è
            </button>
          </div>
        ))}
      </div>

      <div className={styles.actions}>
        <Button onClick={handleSave} disabled={loading}>
          {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
        </Button>
      </div>
    </div>
  );
};

export default LeadStatusesSettings;
