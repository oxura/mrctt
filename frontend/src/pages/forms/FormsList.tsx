import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import AppLayout from '../../layouts/AppLayout';
import api from '../../utils/api';
import { Form, FormsListResponse } from '../../types/forms';
import { useToast } from '../../components/ui/toastContext';
import styles from './Forms.module.css';

const FormsList: React.FC = () => {
  const navigate = useNavigate();
  const { success: showToastSuccess, error: showToastError } = useToast();
  const [forms, setForms] = useState<Form[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    loadForms();
  }, []);

  const loadForms = async () => {
    try {
      setLoading(true);
      const response = await api.get<{ data: FormsListResponse }>('/api/v1/forms', {
        params: { page_size: 100 },
      });
      setForms(response.data.data.forms);
    } catch (error: any) {
      showToastError(error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ä–º—ã');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ñ–æ—Ä–º—É?')) {
      return;
    }

    try {
      await api.delete(`/api/v1/forms/${id}`);
      showToastSuccess('–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
      loadForms();
    } catch (error: any) {
      showToastError(error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ä–º—É');
    }
  };

  const handleCopyUrl = (publicUrl: string) => {
    const fullUrl = `${window.location.origin}/public-form/${publicUrl}`;
    navigator.clipboard.writeText(fullUrl);
    showToastSuccess('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
  };

  const filteredForms = forms.filter((form) =>
    form.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const dateFormatter = (value: string) => {
    const date = new Date(value);
    const options: Intl.DateTimeFormatOptions = {
      day: '2-digit',
      month: 'short',
      year: 'numeric',
    };
    return date.toLocaleDateString('ru-RU', options).replace('.', '');
  };

  return (
    <AppLayout breadcrumbs={['–§–æ—Ä–º—ã']}>
      <div className={styles.wrapper}>
        <div className={styles.pageHeader}>
          <div>
            <p className={styles.pageEyebrow}>–ö–û–ù–°–¢–†–£–ö–¢–û–†</p>
            <h1>–§–æ—Ä–º—ã –∑–∞—è–≤–æ–∫</h1>
          </div>
          <div className={styles.headerActions}>
            <button
              className={styles.primaryButton}
              onClick={() => navigate('/forms/builder')}
            >
              + –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É
            </button>
          </div>
        </div>

        <div className={styles.toolbar}>
          <div className={styles.searchBlock}>
            <div className={styles.searchField}>
              <span>üîç</span>
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>
        </div>

        <div className={styles.tableCard}>
          {loading ? (
            <div className={styles.loader}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
          ) : filteredForms.length === 0 ? (
            <div className={styles.emptyState}>
              <p className={styles.emptyIcon}>üìù</p>
              <p className={styles.emptyTitle}>–ù–µ—Ç —Ñ–æ—Ä–º</p>
              <p className={styles.emptySubtitle}>
                {searchTerm
                  ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
                  : '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ñ–æ—Ä–º—É –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞—è–≤–æ–∫'}
              </p>
            </div>
          ) : (
            <table className={styles.table}>
              <thead>
                <tr>
                  <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                  <th>–ü—Ä–æ–¥—É–∫—Ç</th>
                  <th>–ü–æ–ª—è</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                  <th>–°–æ–∑–¥–∞–Ω–∞</th>
                  <th className={styles.actionsCell}>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>
              <tbody>
                {filteredForms.map((form) => (
                  <tr key={form.id} className={styles.tableRow}>
                    <td className={styles.nameCell}>
                      <div className={styles.formName}>{form.name}</div>
                    </td>
                    <td>
                      {form.product_name ? (
                        <span className={styles.productBadge}>{form.product_name}</span>
                      ) : (
                        <span className={styles.noProduct}>‚Äî</span>
                      )}
                    </td>
                    <td>
                      <span className={styles.fieldsCount}>
                        {form.fields?.length || 0} –ø–æ–ª–µ–π
                      </span>
                    </td>
                    <td>
                      <span
                        className={`${styles.statusBadge} ${
                          form.is_active ? styles.statusActive : styles.statusInactive
                        }`}
                      >
                        {form.is_active ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
                      </span>
                    </td>
                    <td className={styles.dateCell}>{dateFormatter(form.created_at)}</td>
                    <td className={styles.actionsCell}>
                      <button
                        className={styles.actionButton}
                        onClick={() => navigate(`/forms/builder/${form.id}`)}
                        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                      >
                        ‚úèÔ∏è
                      </button>
                      <button
                        className={styles.actionButton}
                        onClick={() => form.public_url && handleCopyUrl(form.public_url)}
                        title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É"
                      >
                        üîó
                      </button>
                      <button
                        className={styles.actionButton}
                        onClick={() => handleDelete(form.id)}
                        title="–£–¥–∞–ª–∏—Ç—å"
                      >
                        üóëÔ∏è
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
      </div>
    </AppLayout>
  );
};

export default FormsList;
