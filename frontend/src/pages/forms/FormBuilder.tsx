import React, { useEffect, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import AppLayout from '../../layouts/AppLayout';
import api from '../../utils/api';
import { Form, FormField, FormFieldType, CreateFormRequest } from '../../types/forms';
import { Product } from '../../types';
import { useToast } from '../../components/ui/toastContext';
import styles from './FormBuilder.module.css';

const fieldTypeLabels: Record<FormFieldType, string> = {
  text: '–¢–µ–∫—Å—Ç',
  phone: '–¢–µ–ª–µ—Ñ–æ–Ω',
  email: 'Email',
  dropdown: '–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫',
  checkbox: '–ß–µ–∫–±–æ–∫—Å',
  date: '–î–∞—Ç–∞',
};

const fieldTypeIcons: Record<FormFieldType, string> = {
  text: 'üìù',
  phone: 'üìû',
  email: 'üìß',
  dropdown: 'üìã',
  checkbox: '‚òëÔ∏è',
  date: 'üìÖ',
};

const FormBuilder: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { success: showToastSuccess, error: showToastError } = useToast();

  const [formName, setFormName] = useState('–ù–æ–≤–∞—è —Ñ–æ—Ä–º–∞');
  const [productId, setProductId] = useState<string>('');
  const [successMessage, setSuccessMessage] = useState('–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
  const [fields, setFields] = useState<FormField[]>([]);
  const [selectedFieldId, setSelectedFieldId] = useState<string | null>(null);
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [publicUrl, setPublicUrl] = useState<string | null>(null);
  const [draggedFieldType, setDraggedFieldType] = useState<FormFieldType | null>(null);
  const [draggedFieldId, setDraggedFieldId] = useState<string | null>(null);

  useEffect(() => {
    loadProducts();
    if (id) {
      loadForm(id);
    }
  }, [id]);

  const loadProducts = async () => {
    try {
      const response = await api.get('/api/v1/products', {
        params: { page_size: 100, status: 'active' },
      });
      setProducts(response.data.data.products || []);
    } catch (error: any) {
      console.error('Failed to load products', error);
    }
  };

  const loadForm = async (formId: string) => {
    try {
      setLoading(true);
      const response = await api.get<{ data: Form }>(`/api/v1/forms/${formId}`);
      const form = response.data.data;
      setFormName(form.name);
      setProductId(form.product_id || '');
      setSuccessMessage(form.success_message || '–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
      setFields(form.fields || []);
      setPublicUrl(form.public_url || null);
    } catch (error: any) {
      showToastError(error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ä–º—É');
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    if (!formName.trim()) {
      showToastError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã');
      return;
    }

    try {
      setSaving(true);
      const payload: CreateFormRequest = {
        name: formName,
        product_id: productId || null,
        fields,
        success_message: successMessage,
      };

      if (id) {
        const response = await api.put<{ data: Form }>(`/api/v1/forms/${id}`, payload);
        setPublicUrl(response.data.data.public_url || null);
        showToastSuccess('–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        const response = await api.post<{ data: Form }>('/api/v1/forms', payload);
        setPublicUrl(response.data.data.public_url || null);
        showToastSuccess('–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
        navigate(`/forms/builder/${response.data.data.id}`, { replace: true });
      }
    } catch (error: any) {
      showToastError(error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ä–º—É');
    } finally {
      setSaving(false);
    }
  };

  const handleDragStartFromToolbox = (fieldType: FormFieldType) => {
    setDraggedFieldType(fieldType);
  };

  const handleDragStartFromCanvas = (fieldId: string) => {
    setDraggedFieldId(fieldId);
  };

  const handleDragOverCanvas = (e: React.DragEvent) => {
    e.preventDefault();
  };

  const handleDropOnCanvas = (e: React.DragEvent, targetIndex?: number) => {
    e.preventDefault();

    if (draggedFieldType) {
      const newField: FormField = {
        id: `field-${Date.now()}`,
        type: draggedFieldType,
        label: `${fieldTypeLabels[draggedFieldType]}`,
        placeholder: '',
        required: false,
        options: draggedFieldType === 'dropdown' ? ['–í–∞—Ä–∏–∞–Ω—Ç 1', '–í–∞—Ä–∏–∞–Ω—Ç 2'] : undefined,
      };

      if (targetIndex !== undefined) {
        const newFields = [...fields];
        newFields.splice(targetIndex, 0, newField);
        setFields(newFields);
      } else {
        setFields([...fields, newField]);
      }

      setSelectedFieldId(newField.id);
      setDraggedFieldType(null);
    } else if (draggedFieldId) {
      const draggedIndex = fields.findIndex((f) => f.id === draggedFieldId);
      if (draggedIndex === -1) return;

      const newFields = [...fields];
      const [draggedField] = newFields.splice(draggedIndex, 1);

      let insertIndex = targetIndex ?? newFields.length;
      if (insertIndex > draggedIndex) {
        insertIndex -= 1;
      }

      newFields.splice(insertIndex, 0, draggedField);

      setFields(newFields);
      setDraggedFieldId(null);
    }
  };

  const handleDeleteField = (fieldId: string) => {
    setFields(fields.filter((f) => f.id !== fieldId));
    if (selectedFieldId === fieldId) {
      setSelectedFieldId(null);
    }
  };

  const handleUpdateField = (fieldId: string, updates: Partial<FormField>) => {
    setFields(fields.map((f) => (f.id === fieldId ? { ...f, ...updates } : f)));
  };

  const handleCopyUrl = () => {
    if (!publicUrl) return;
    const fullUrl = `${window.location.origin}/public-form/${publicUrl}`;
    navigator.clipboard.writeText(fullUrl);
    showToastSuccess('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
  };

  const selectedField = fields.find((f) => f.id === selectedFieldId);

  if (loading) {
    return (
      <AppLayout breadcrumbs={['–§–æ—Ä–º—ã', '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä']}>
        <div className={styles.loader}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </AppLayout>
    );
  }

  return (
    <AppLayout breadcrumbs={['–§–æ—Ä–º—ã', id ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–°–æ–∑–¥–∞–Ω–∏–µ']}>
      <div className={styles.builderContainer}>
        <div className={styles.builderHeader}>
          <input
            type="text"
            className={styles.formNameInput}
            value={formName}
            onChange={(e) => setFormName(e.target.value)}
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã"
          />
          <div className={styles.headerActions}>
            <button className={styles.secondaryButton} onClick={() => navigate('/forms')}>
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              className={styles.primaryButton}
              onClick={handleSave}
              disabled={saving}
            >
              {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
            </button>
          </div>
        </div>

        <div className={styles.builderBody}>
          <div className={styles.toolboxPanel}>
            <h3>–ë–ª–æ–∫–∏ –ø–æ–ª–µ–π</h3>
            <div className={styles.toolboxItems}>
              {(Object.keys(fieldTypeLabels) as FormFieldType[]).map((type) => (
                <div
                  key={type}
                  className={styles.toolboxItem}
                  draggable
                  onDragStart={() => handleDragStartFromToolbox(type)}
                >
                  <span className={styles.toolboxIcon}>{fieldTypeIcons[type]}</span>
                  <span>{fieldTypeLabels[type]}</span>
                </div>
              ))}
            </div>
          </div>

          <div
            className={styles.canvasPanel}
            onDragOver={handleDragOverCanvas}
            onDrop={handleDropOnCanvas}
          >
            <h3>–ü—Ä–µ–≤—å—é —Ñ–æ—Ä–º—ã</h3>
            {fields.length === 0 ? (
              <div className={styles.canvasEmpty}>
                <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø–æ–ª—è –∏–∑ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É</p>
              </div>
            ) : (
              <div className={styles.canvasFields}>
                {fields.map((field, index) => (
                  <div
                    key={field.id}
                    className={`${styles.canvasField} ${
                      selectedFieldId === field.id ? styles.canvasFieldSelected : ''
                    }`}
                    draggable
                    onDragStart={() => handleDragStartFromCanvas(field.id)}
                    onDragOver={(e) => e.preventDefault()}
                    onDrop={(e) => handleDropOnCanvas(e, index)}
                    onClick={() => setSelectedFieldId(field.id)}
                  >
                    <div className={styles.fieldHeader}>
                      <span className={styles.fieldIcon}>{fieldTypeIcons[field.type]}</span>
                      <span className={styles.fieldLabel}>
                        {field.label}
                        {field.required && <span className={styles.required}>*</span>}
                      </span>
                      <button
                        className={styles.fieldDeleteButton}
                        onClick={(e) => {
                          e.stopPropagation();
                          handleDeleteField(field.id);
                        }}
                      >
                        ‚úï
                      </button>
                    </div>
                    <div className={styles.fieldPreview}>
                      {field.type === 'text' && (
                        <input type="text" placeholder={field.placeholder || '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç'} disabled />
                      )}
                      {field.type === 'phone' && (
                        <input type="tel" placeholder={field.placeholder || '+7 (999) 123-45-67'} disabled />
                      )}
                      {field.type === 'email' && (
                        <input type="email" placeholder={field.placeholder || 'email@example.com'} disabled />
                      )}
                      {field.type === 'date' && <input type="date" disabled />}
                      {field.type === 'checkbox' && (
                        <label>
                          <input type="checkbox" disabled /> {field.placeholder || '–°–æ–≥–ª–∞—Å–µ–Ω'}
                        </label>
                      )}
                      {field.type === 'dropdown' && (
                        <select disabled>
                          <option>{field.placeholder || '–í—ã–±–µ—Ä–∏—Ç–µ...'}</option>
                          {field.options?.map((opt, i) => (
                            <option key={i}>{opt}</option>
                          ))}
                        </select>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          <div className={styles.propertiesPanel}>
            <h3>–°–≤–æ–π—Å—Ç–≤–∞</h3>
            {selectedField ? (
              <div className={styles.propertiesForm}>
                <div className={styles.formGroup}>
                  <label>–¢–∏–ø –ø–æ–ª—è</label>
                  <input type="text" value={fieldTypeLabels[selectedField.type]} disabled />
                </div>
                <div className={styles.formGroup}>
                  <label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è</label>
                  <input
                    type="text"
                    value={selectedField.label}
                    onChange={(e) =>
                      handleUpdateField(selectedField.id, { label: e.target.value })
                    }
                  />
                </div>
                <div className={styles.formGroup}>
                  <label>Placeholder</label>
                  <input
                    type="text"
                    value={selectedField.placeholder || ''}
                    onChange={(e) =>
                      handleUpdateField(selectedField.id, { placeholder: e.target.value })
                    }
                  />
                </div>
                <div className={styles.formGroup}>
                  <label className={styles.checkboxLabel}>
                    <input
                      type="checkbox"
                      checked={selectedField.required}
                      onChange={(e) =>
                        handleUpdateField(selectedField.id, { required: e.target.checked })
                      }
                    />
                    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                  </label>
                </div>
                {selectedField.type === 'dropdown' && (
                  <div className={styles.formGroup}>
                    <label>–í–∞—Ä–∏–∞–Ω—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
                    <textarea
                      value={selectedField.options?.join(', ') || ''}
                      onChange={(e) =>
                        handleUpdateField(selectedField.id, {
                          options: e.target.value.split(',').map((s) => s.trim()).filter(Boolean),
                        })
                      }
                      rows={3}
                    />
                  </div>
                )}
              </div>
            ) : (
              <div className={styles.propertiesEmpty}>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</p>
              </div>
            )}

            <hr className={styles.divider} />

            <div className={styles.formSettings}>
              <h4>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º—ã</h4>
              <div className={styles.formGroup}>
                <label>–ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç—É</label>
                <select
                  value={productId}
                  onChange={(e) => setProductId(e.target.value)}
                >
                  <option value="">–ù–µ –≤—ã–±—Ä–∞–Ω</option>
                  {products.map((product) => (
                    <option key={product.id} value={product.id}>
                      {product.name}
                    </option>
                  ))}
                </select>
              </div>
              <div className={styles.formGroup}>
                <label>–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏</label>
                <textarea
                  value={successMessage}
                  onChange={(e) => setSuccessMessage(e.target.value)}
                  rows={3}
                />
              </div>
              {publicUrl && (
                <div className={styles.formGroup}>
                  <label>–ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞</label>
                  <div className={styles.urlCopyGroup}>
                    <input
                      type="text"
                      value={`${window.location.origin}/public-form/${publicUrl}`}
                      readOnly
                    />
                    <button className={styles.copyButton} onClick={handleCopyUrl}>
                      –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </AppLayout>
  );
};

export default FormBuilder;
